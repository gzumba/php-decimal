<?php
namespace Piggly\Test\Decimal;

use PHPUnit\Framework\TestCase;
use Piggly\Decimal\Decimal;
use Piggly\Decimal\DecimalConfig;
use RuntimeException;
use stdClass;

/**
 * @coversDefaultClass \Piggly\Decimal\Decimal
 */
class ToNearestMethodDecimalTest extends TestCase
{
	/**
	 * Setup Decimal configuration.
	 *
	 * @return void
	 */
	protected function setUp () : void
	{
		DecimalConfig
			::instance()
			->set([
				'precision' => 20,
				'rounding' => 4,
				'toExpNeg' => -9e15,
				'toExpPos' => 9e15,
				'maxE' => 9e15,
				'minE' => -9e15
			]);
	}

	/**
	 * Assert if is matching the expected data.
	 *
	 * @covers ::toNearest
	 * @test Expecting positive assertion
    * @dataProvider dataSetOne
	 * @param string $expected
	 * @param Decimal|integer|float|string $n
	 * @param Decimal|integer|float|string $y
	 * @param integer $rm Rounding mode
	 * @return void
	 */
	public function testSetOne (
		string $expected,
		$n,
		$y = null,
		$rm = null,
		$sd = null
	)
	{ 
		if ( !is_null($sd) )
		{ DecimalConfig::instance()->set(['precision' => $sd]); }

		$this->assertEquals($expected, (new Decimal($n))->toNearest($y, $rm)->valueOf()); 
	}

	/**
	 * Assert if is matching the expected data.
	 *
	 * @covers ::toNearest
	 * @test Expecting positive assertion
    * @dataProvider dataSetTwo
	 * @param bool $exp
	 * @return void
	 */
	public function testSetTwo (
		bool $exp
	)
	{ $this->assertTrue($exp); }
	
	/**
	 * Provider for testSetOne().
	 * @return array
	 */
	public function dataSetOne() : array
	{
		return [			
			['INF', INF],
			['-INF', -INF],
			['NAN', NAN],
			['NAN', NAN, NAN],
			['NAN', NAN, INF],
			['NAN', NAN, -INF],
			['NAN', NAN, 0],
			['NAN', NAN, -0],

			['INF', '9.999e+9000000000000000', '1e+9000000000000001'],
			['INF', '9.999e+9000000000000000', '-1e+9000000000000001'],
			['-INF', '-9.999e+9000000000000000', '1e+9000000000000001'],
			['-INF', '-9.999e+9000000000000000', '-1e+9000000000000001'],
			['9.999e+9000000000000000', '9.999e+9000000000000000'],
			['-9.999e+9000000000000000', '-9.999e+9000000000000000'],

			['NAN', 123.456, NAN],
			['INF', 123.456, INF],
			['INF', 123.456, -INF],
			['0', 123.456, 0],
			['0', 123.456, '-0'],

			['NAN', -123.456, NAN],
			['-INF', -123.456, INF],
			['-INF', -123.456, -INF],
			['-0', -123.456, '-0'],

			['0', 0, 0],
			['INF', 0, INF],
			['INF', 0, -INF],
			['-INF', '-0', INF],
			['-INF', '-0', -INF],

			['0', 1, -3],
			['-0', -1, -3],
			['3', 1.5, -3, 0],
			['-0', -1.5, -3, 1],
			['-3', -1.5, -3, 2],

			['123', 123.456],
			['123', 123.456, 1],
			['123.5', 123.456, 0.1],
			['123.46', 123.456, 0.01],
			['123.456', 123.456, 0.001],

			['123', 123.456, -1],
			['123.5', 123.456, -0.1],
			['123.46', 123.456, -0.01],
			['123.456', 123.456, -0.001],

			['124', 123.456, '-2'],
			['123.4', 123.456, '-0.2'],
			['123.46', 123.456, '-0.02'],
			['123.456', 123.456, '-0.002'],

			['83105511540', '83105511539.5', 1, 4],
			['83105511539', '83105511539.499999999999999999999999999999', 1, 4],
			['83105511539', '83105511539.5', '1', 5],
			['83105511540', '83105511539.5000000000000000000001', 1, 5],

			// sd 3
			['83105511540', '83105511539.5', new Decimal(1), 4, 3],
			['83105511539', '83105511539.499999999999999999999999999999', 1, 4, 3],
			['83105511539', '83105511539.5', new Decimal('1'), 5, 3],
			['83105511540', '83105511539.5000000000000000000001', 1, 5, 3],

			// sd 20
			['83105511540', '83105511539.5', -1, 4, 20],
			['83105511539', '83105511539.499999999999999999999999999999', -1, 4, 20],
			['83105511539', '83105511539.5', '-1', 5, 20],
			['83105511540', '83105511539.5000000000000000000001', -1, 5, 20],

			['-83105511540', '-83105511539.5', new Decimal(-1), 4, 20],
			['-83105511539', '-83105511539.499999999999999999999999999999', 1, 4, 20],
			['-83105511539', '-83105511539.5', new Decimal('-1'), 5, 20],
			['-83105511540', '-83105511539.5000000000000000000001', -1, 5, 20],

			['83105511540', '83105511539.5', 1, 0, 20],
			['83105511539', '83105511539.5', 1, 1, 20],
			['83105511540', '83105511539.5', 1, 2, 20],
			['83105511539', '83105511539.5', 1, 3, 20],
			['83105511540', '83105511539.5', 1, 4, 20],
			['83105511539', '83105511539.5', 1, 5, 20],
			['83105511540', '83105511539.5', 1, 6, 20],
			['83105511540', '83105511539.5', 1, 7, 20],
			['83105511539', '83105511539.5', 1, 8, 20],
			['83105511539', '83105511539.499999999999999999999999999999', null, 0, 20],
			['83105511539', '83105511539.499999999999999999999999999999', 1, 1, 20],
			['83105511539', '83105511539.499999999999999999999999999999', null, 2, 20],
			['83105511539', '83105511539.499999999999999999999999999999', 1, 3, 20],
			['83105511539', '83105511539.499999999999999999999999999999', null, 4, 20],
			['83105511539', '83105511539.499999999999999999999999999999', 1, 5, 20],
			['83105511539', '83105511539.499999999999999999999999999999', null, 6, 20],
			['83105511539', '83105511539.499999999999999999999999999999', 1, 7, 20],
			['83105511539', '83105511539.499999999999999999999999999999', null, 8, 20],
			['83105511540', '83105511539.5000000000000000000001', null, 0, 20],
			['83105511539', '83105511539.5000000000000000000001', 1, 1, 20],
			['83105511540', '83105511539.5000000000000000000001', null, 2, 20],
			['83105511539', '83105511539.5000000000000000000001', 1, 3, 20],
			['83105511540', '83105511539.5000000000000000000001', null, 4, 20],
			['83105511540', '83105511539.5000000000000000000001', 1, 5, 20],
			['83105511540', '83105511539.5000000000000000000001', null, 6, 20],
			['83105511540', '83105511539.5000000000000000000001', 1, 7, 20],
			['83105511540', '83105511539.5000000000000000000001', null, 8, 20],

			['83105511540', '83105511539.5', null, 0, 20],
			['83105511540', '83105511539.5', null, 1, 20],
			['3847570', '3847561.00000749', 10, 0, 20],
			['42840000000000000', '42835000000000001', '1e+13', 0, 20],
			['42830000000000000', '42835000000000001', '1e+13', 1, 20],
			['42840000000000000', '42835000000000000.0002', '1e+13', 0, 20],
			['42830000000000000', '42835000000000000.0002', '1e+13', 1, 20],

			['500', '449.999', 100, 0, 20],
			['400', '449.999', 100, 1, 20],
			['500', '449.999', 100, 2, 20],
			['400', '449.999', 100, 3, 20],
			['400', '449.999', 100, 4, 20],
			['400', '449.999', 100, 5, 20],
			['400', '449.999', 100, 6, 20],
			['400', '449.999', 100, 7, 20],
			['400', '449.999', 100, 8, 20],

			['-500', '-449.999', 100, 0, 20],
			['-400', '-449.999', 100, 1, 20],
			['-400', '-449.999', 100, 2, 20],
			['-500', '-449.999', 100, 3, 20],
			['-400', '-449.999', 100, 4, 20],
			['-400', '-449.999', 100, 5, 20],
			['-400', '-449.999', 100, 6, 20],
			['-400', '-449.999', 100, 7, 20],
			['-400', '-449.999', 100, 8, 20],

			['500', '450', 100, 0, 20],
			['400', '450', 100, 1, 20],
			['500', '450', 100, 2, 20],
			['400', '450', 100, 3, 20],
			['500', '450', 100, 4, 20],
			['400', '450', 100, 5, 20],
			['400', '450', 100, 6, 20],
			['500', '450', 100, 7, 20],
			['400', '450', 100, 8, 20],

			['-500', '-450', 100, 0, 20],
			['-400', '-450', 100, 1, 20],
			['-400', '-450', 100, 2, 20],
			['-500', '-450', 100, 3, 20],
			['-500', '-450', 100, 4, 20],
			['-400', '-450', 100, 5, 20],
			['-400', '-450', 100, 6, 20],
			['-400', '-450', 100, 7, 20],
			['-500', '-450', 100, 8, 20],

			['500', '450.001', 100, 0, 20],
			['400', '450.001', 100, 1, 20],
			['500', '450.001', 100, 2, 20],
			['400', '450.001', 100, 3, 20],
			['500', '450.001', 100, 4, 20],
			['500', '450.001', 100, 5, 20],
			['500', '450.001', 100, 6, 20],
			['500', '450.001', 100, 7, 20],
			['500', '450.001', 100, 8, 20],

			['-500', '-450.001', 100, 0, 20],
			['-400', '-450.001', 100, 1, 20],
			['-400', '-450.001', 100, 2, 20],
			['-500', '-450.001', 100, 3, 20],
			['-500', '-450.001', 100, 4, 20],
			['-500', '-450.001', 100, 5, 20],
			['-500', '-450.001', 100, 6, 20],
			['-500', '-450.001', 100, 7, 20],
			['-500', '-450.001', 100, 8, 20],
		];
	}
	
	/**
	 * Provider for testSetTwo().
	 * @return array
	 */
	public function dataSetTwo() : array
	{
		return [
			[!$this->isMinusZero((new Decimal(0))->toNearest(0)), 20],
			[ $this->isMinusZero((new Decimal(-1))->toNearest(0)), 20],
			[ $this->isMinusZero((new Decimal('-0'))->toNearest(0)), 20],
			[!$this->isMinusZero((new Decimal(1))->toNearest(0)), 20],
			[!$this->isMinusZero((new Decimal(1))->toNearest('-0')), 20],
			[!$this->isMinusZero((new Decimal(1))->toNearest(-3)), 20],
			[ $this->isMinusZero((new Decimal(-1))->toNearest(-3)), 20],
		];
	}

	private function isMinusZero ( Decimal $n ) : bool
	{ return $n->isZero() && $n->isNegative(); }
}